package exerciseTwo;


/*********************************************************************************************
 * File(s): programTwo.java												     				 *
 * Execution:  programThree is the main class containing the main method 					 *
 * 									 														 *
 * *******************************************************************************************
 * A modified msp3 to print out the maximum subsequence product, input elements, first and last 
 * position of the maximum subsequence product using a divide and conquer algorithm and keeping 
 * track of number of positions that where either negative or positive.
 * Time Complexities for this program O(nlogn).
 * */


import java.util.Scanner; 
import java.lang.Math;  

public class programThree {
	static int a[]; 						//Array a
	static int maxProduct;					//Maximum Subsequence product
	static int prodlt, prodrt;				//product at any instance for lEFT and RIGHT
	static int p1; 		    				//p1 reflect the starting boundary of the current subsequence to be evaluated
	static int p2;  						//p2 reflect the ending boundary of the current subsequence to be evaluated
	static int n;							// size of array
	static int m;							// midpoint of the starting and ending boundaries
	static int L, R;						// msp3 for left and right half of the array list
	static int PL, PR;						// Related to msp3 for both left and right based on prodrt and prodlt
	public programThree(){  				// default constructor 
	}


	public static int mss3(int a[], int p1, int p2)  
	   {  
	     int maxProduct =1;  
	     if (p1 == p2)  
	     {  
	       maxProduct = a[p1];  
	     }  
	     else  
	     {  
	       int m = (p1 + p2)/2;  
	       int L = mss3(a,p1,m);int R = mss3(a,m+1,p2);  
	       int prodlt = 1; int prodrt = 1; int PL = 0; int PR = 0;  
	       int numberOfNegativeL = 0; int numberOfNegativeR = 0;  
	       int lastPositionBeforeOddNegativeR =0;  
	       int lastPositionBeforeOddNegativeL =0;  
	       int lastProductBeforeOddNegativeR = 1;  
	       int lastProductBeforeOddNegativeL = 1;  
	       int lastProductBeforeEvenNegativeL = 1;  
	       int lastProductBeforeEvenNegativeR = 1;  
	       int lastPositionBeforeEvenNegativeL = 0;  
	       int lastPositionBeforeEvenNegativeR = 0;  
	       for (int i =m; i>=p1; i--)  //left side
	       {  
	         if (a[i]!=0)  
	         {prodlt = prodlt * a[i];  
	         PL = prodlt;}  
	         else  
	         {  
	         break;  
	         }  
	         if (a[i]<0)  //keeps track of number of negative numbers
	         {  
	          numberOfNegativeL++;  
	           if ((numberOfNegativeL%2)!=0)  
	           {  
	            lastPositionBeforeOddNegativeL = i;  
	            lastProductBeforeOddNegativeL = PL;  
	           }  
	           if ((numberOfNegativeL%2)==0)  
	           {  
	             lastPositionBeforeEvenNegativeL = i;  
	             lastProductBeforeEvenNegativeL = PL;  
	           }  
	         }  
	       }  
	       for (int i = m+1; i<=p2; i++)  //right side
	       {  
	         if (a[i]!=0)  
	         {prodrt = prodrt * a[i];  
	         PR = prodrt;}  
	         else  
	         {  
	           break;  
	         }  
	         if (a[i]<0)  
	         {  
	           numberOfNegativeR++;  
	           if ((numberOfNegativeR%2)!=0)  
	           {  
	            lastPositionBeforeOddNegativeR = i;  
	            lastProductBeforeOddNegativeR = PR;  
	           }  
	           if ((numberOfNegativeR%2)==0)  
	           {  
	             lastPositionBeforeEvenNegativeR = i;  
	             lastProductBeforeEvenNegativeR = PR;  
	           }  
	         }  
	       }  
	       if ((numberOfNegativeL+numberOfNegativeR)%2==0)  
	       {maxProduct = Math.max(Math.max(L,R),PL*PR);}  
	       else  
	       {  
	         if ((numberOfNegativeR)%2!=0) //all product on left and product up til negative number on right
	         {  
	           int maxStraddleProduct1 =1;  
	           int maxStraddleProduct2 =1;  
	           int maxStraddleProduct3 =1;  
	           if (a[lastPositionBeforeEvenNegativeL]!=0)  
	           { maxStraddleProduct1 = PR*lastProductBeforeEvenNegativeL/a[lastPositionBeforeEvenNegativeL];}  
	           if (a[lastPositionBeforeOddNegativeR]!=0)  
	           { maxStraddleProduct2 = PL*lastProductBeforeOddNegativeR/a[lastPositionBeforeOddNegativeR];}  
	           if (a[lastPositionBeforeEvenNegativeR]!=0)  
	           {  
	             maxStraddleProduct3 = PL*lastProductBeforeEvenNegativeR/a[lastPositionBeforeEvenNegativeR];  
	           }  
	           int maxStraddle = Math.max(maxStraddleProduct1, maxStraddleProduct2);  
	           int maxStraddle2 = Math.max(maxStraddle,maxStraddleProduct3);  
	           maxProduct = Math.max(Math.max(L,R),maxStraddle2);  
	         }  
	         if ((numberOfNegativeL)%2!=0)  //all produce on right and product up til negative number on left
	         {  
	        	 // all three possible cases;
	           int maxStraddleProduct1=1;  
	           int maxStraddleProduct2=1;  
	           int maxStraddleProduct3=1;  
	           if (a[lastPositionBeforeEvenNegativeR]!=0)  //cancels out last negative causing negative straddle
	           { maxStraddleProduct1 = PL*lastProductBeforeEvenNegativeR/a[lastPositionBeforeEvenNegativeR];}  
	           if (a[lastPositionBeforeOddNegativeL]!=0)  
	           { maxStraddleProduct2 = PR*lastProductBeforeOddNegativeL/a[lastPositionBeforeOddNegativeL];}  
	           if (a[lastPositionBeforeEvenNegativeR]!=0)  
	           {  
	             maxStraddleProduct3 = PL*lastProductBeforeEvenNegativeR/a[lastPositionBeforeEvenNegativeR];  
	           }  
	            int maxStraddle = Math.max(maxStraddleProduct1, maxStraddleProduct2);  
	            int maxStraddle2 = Math.max(maxStraddle,maxStraddleProduct3);  
	           maxProduct = Math.max(Math.max(L,R),maxStraddle2);  
	         }  
	       } 
	     }  
	     return maxProduct;  
	   }  
	          
   public static void main(String[] args)
   {
	   Scanner input = new Scanner(System.in);
	      int n;
		   
	      System.out.println("Enter the Array size N:");
	      
	      n = input.nextInt();
	      int[] a = new int[n+1];
	     
	      for (int i=1; i<=n; i++)
	      {
	    	  a[i] =input.nextInt(); 
	    	  
	      }
	      
	      input.close();
	      
	      System.out.println("Input Elements: ");
	      System.out.println("*******************************");
	      
	      for(int i =1; i<=n; i++)
	      {
	    	  System.out.print(a[i]+" ");
	      }
	      System.out.println("");
	      
	      int p1 = 0;  
	      int p2 = a.length-1; 
	     
	      maxProduct = mss3(a,p1,p2);
	       
	        System.out.println("*******************************");
	        System.out.println("First position: " + p1);
	        System.out.println("*******************************");
	        System.out.println("Last  position: " + p2);
	        System.out.println("*******************************");
	        System.out.println( "Max Product is " + maxProduct);
   }
   
}