package exerciseOne;
 
import java.util.List;
import java.util.Scanner; 

public class programOne {
	private int count[] = new int[20]; 				//predecessors' Count array
	private int n;									//Set of n integers (vertices in graph)
	private int output[] = new int[20]; 		    //Storing items that have been picked in output array
	private int next;  								//A reference to the next node
	private int total;								//number of sorts 
	private LinkedList succ[] = new LinkedList[20]; //Array of LinkedList for successor mapping
	private bagSack bag = new bagSack(); 			//objects without predecessors container 
	public programOne(){  							// default constructor 
	   }  
	
	public static void main(String[] args)
			{ 
		 	  // i,j represents pairs in input, m is a pair and w is an arbitrary constant
		  	  int i, j, w, n;
		  	  int m=0;	
		  
			  // Scanner input enable reading numbers from keyboard
			  Scanner input = new Scanner(System.in);  
			  
			  programOne topsorts = new programOne();  // create an instance of topsorts class  
			  
			  topsorts.count = new int[n+1];  
			  topsorts.succ = new LinkedList[n+1]; // create new int pred array, size n  
			  topsorts.bag  = new bagSack();  // create new object array of SuccArray, size n  
			  topsorts.output = new int[n]; 
			  
			     
			 
			  
			  // read  n the size of the array
			  System.out.println("Enter input values:");
			   n = input.nextInt();
			   
			  //initialize the arrays: output, count and succ
			  for(w=1; w<=n; w=w+1)
			  {
				  topsorts.count[w]=0;
				  topsorts.succ[w] = new LinkedList();
			  }
			  // start inputting pairs
			  while(input.hasNext())
			  {
				  i=input.nextInt();
				  j=input.nextInt();
				  if(i==0 && j==0)
				  {
					  break;
				  }
				  topsorts.count[j] = topsorts.count[j]+1; //increase count[j] by 1
				  topsorts.succ[i].add(j); //insert j to the LinkedList of i
				  m = m + 1;
			  }
			 
			input.close();
			
			// initialize bag
			for (w = 1; w <= n; w = w + 1)
			{
			if (topsorts.count[w] == 0)  // Checking cases where there exist no predecessors, then we add into the bag
				{
					topsorts.bag.append(w);
				}
			}
			
    private void topsorts(){
		if(bag.size >0)
		{
			int size = bag.size;
		 	int x;
		 	bagSack.Node current = bag.head;
		 	bagSack.Node last = bag.head.prev;

		 	while(current.next != bag.head)
		 	{
				current = current.next;
				bag.remove(current);
				output[next++] = current.data;
				List.Node p = succ[current.data].head;
				while(p !=null)
				{
					p = p.next;
					count[p.data]--;
					if(count[p.data] == 0)
					{
						bag.append(p.data);
					}

					topsorts();
					p = succ[current.data].head;
					while(p.next != null)
					{
						p = p.next;
						count[p.data]++;
					}

					output[--next] = 0;
					bag.restore(current);
					bag.removeAllFrom(last, size);
				}
			}
			
				total++;
				if(total < 50){
					for(int k=0; k<next;k++){
						System.out.println(output[k] + " ");
						}
					System.out.println();
				}
			
		}
	}


