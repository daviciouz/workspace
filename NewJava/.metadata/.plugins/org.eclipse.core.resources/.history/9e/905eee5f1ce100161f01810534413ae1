import java.io.*;
import java.util.*;

//Defining Class Bag (i.e. actions that can be done within/outside the bag)

class Bag{
Node head;
int size;
public class Node{
		int data;
		Node next;
		Node prev;
		Node (int x, Node prev, Node next){
			this.data=x;
			this.prev=prev;
			this.next=next;
		}
}
// Methods for Class Bag
public Bag(){
	head = new Node(0, null, null);
	head.prev = head;
	head.next = head;
	size = 0;
}
public void append(int x){
	Node p = new Node(x, head.prev, head);
	p.prev.next = p;
	p.next.prev = p;
}
public void remove(Node p){
	p.prev.next = p.next;
	p.next.prev = p.prev;
	this.size--;
}
public void restore (Node p){
	p.prev.next = p;
	p.next.prev = p;
	this.size++;
}
public void removeAllFrom(Node p, int size){
	p.next = head;
	head.prev = p;
	this.size = size;
}
}	

// Is this the main class?

public class Program1{
	private int count[]; //# of predecessors
	private int n;		//number of vertices in graph
	private int output[]; //array for items that have been picked
	private int next;  //items in output
	private int total;	//number of sorts
	private LinkedList<Integer> succ[]; //null or contains a pointer to first item on succlist
	private int numberStatic; // n 
	private Bag bag; //objects without predecessors initially

public static void main(String[] args){  
	Program1 topSorts = new Program1(); 
	
// Actions: read input, initialization, call topsorts, print total	
public void sort(){
	int number; // n  
    Scanner input1 = new Scanner(System.in);  
    Scanner input2 = new Scanner(System.in);  
    number = input1.nextInt(); // n. O(1)  
    Program1 topsorts = new Program1(); // create an instance of TopSort class  
    total = 0; // initialize count of number of TopSorts to 0  
    topsorts.numberStatic = number;  
    topsorts.count = new int [number+1]; // create new int pred array, size n  
    topsorts.succ = new succ [number+1]; // create new object array of SuccArray, size n   
    topsorts.output= new int [number]; // create output array  
    int i = 1;  
    while (i <= number) //initialize pred array and succ array. O(n)  
    {  
      topsorts.count[i]=0;  
      topsorts.succ[i]= new Succ();  
      i++;  
    }  
    String condition = "default";  
    while (!condition.equals("0 0")) //input pair constraints. O(n)  
    {  
     condition = input2.nextLine();  
     String[] parts = condition.split(" ");  
     int pssor = Integer.parseInt(parts [0]); //store predecessor  
     int sssor = Integer.parseInt(parts [1]); //store successor  
     if (pssor!=0 && sssor !=0){  
     topsorts.count[sssor]= topsorts.count[sssor]+1; //increment pred by 1. O(1)  
     topsorts.succ[pssor].addListNodeSuccessor(sssor);} //add successor. O(1)  
    }  // What is addListNodeSuccessor for the Bag? Append?
    topsorts.bag = new Bag(); // initialize bag  
    int c = 1;  
    while (c<=number) // place all numbers with zero predecessor into bag. O(n)  
    {  
      if (topsorts.count[c]==0)  
      {  
        topsorts.bag.append(c);  
      }  
      c++;  
    }  
    topsorts.topsorts();  //recursive topsorts  
    System.out.println("number of Sorts:" + total);  
}
public void topsorts() 
{
	if(bag.size >0)
	{
		int size = bag.size;
	 	int x;
	 	Bag.Node current = bag.head;
	 	Bag.Node last = bag.head.prev;

	 	while(current.next != bag.head)
	 	{
			current = current.next;
			bag.remove(current);
			output[next++] = current.data;
			List.Node p = succ[current.data].head;
			while(p !=null)
			{
				p = p.next;
				count[p.data]--;
				if(count[p.data] == 0)
				{
					bag.append(p.data);
				}

				topsorts();
				p = succ[current.data].head;
				while(p.next != null)
				{
					p = p.next;
					count[p.data]++;
				}

				output[--next] = 0;
				bag.restore(current);
				bag.removeAllFrom(last, size);
			}
		}
		
			total++;
			if(total < 50){
				for(int k=0; k<next;k++){
					System.out.println(output[k] + " ");
					}
				System.out.println();
			}
		
	}
}
}
}